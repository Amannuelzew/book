// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email       String @unique
  password    String
  location    String
  phoneNumber String
  image       String @default("")
  role        String @default("USER")

  wallet Float    @default(0)
  owners Owner[]
  Rental Rental[]
}

model Owner {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  location String
  approved Boolean @default(false)
  disabled Boolean @default(false)
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  books    Book[]
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  books Book[]
}

model Book {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author     String
  title      String
  approved   Boolean  @default(false)
  quantity   Int      @default(1)
  price      Float
  url        String   @default("")
  available  Boolean  @default(true)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  ownerId    String
  owner      Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rent       Rental[]

  @@unique([ownerId, title])
}

model Rental {
  id       String   @id @default(uuid())
  rentedAt DateTime @default(now())
  //returneddAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  books Book[]
}
